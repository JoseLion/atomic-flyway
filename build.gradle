buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id('checkstyle')
  id('java-library')
  id('maven-publish')
  id('signing')

  alias(libs.plugins.prettyJupiter)
  alias(libs.plugins.publishPlugin)
  alias(libs.plugins.sonarlint)
  alias(libs.plugins.strictNullCheck)
}

group = 'io.github.joselion'

java {
  sourceCompatibility = JavaLanguageVersion.of(16)
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
    vendor = JvmVendorSpec.ORACLE
  }
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  title = 'Atomic Flyway'
  options {
    encoding = 'UTF-8'
    addBooleanOption('html5', true)
    addStringOption('Xwerror', '-quiet')
    tags('apiNote')
  }
}

jar {
  from(sourceSets.main.allSource)
  manifest {
    attributes(
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-Jdk-Spec': java.sourceCompatibility,
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Implementation-Title': project.name,
      'Implementation-Vendor': 'Jose Luis Leon',
      'Implementation-Version': project.version,
      'Package': "${project.group}.${project.name}",
    )
  }
}

checkstyle {
  setToolVersion(libs.versions.checkstyle.get())
}

sonarLint {
  setToolVersion(libs.versions.sonarlint.core.get())
  languages {
    include('java')
  }
  rules {
    enable(
      'java:S4266', // "Stream.collect()" calls should not be redundant
    )
    disable(
      'java:S107', // Allow constructors with more than 7 parameters
      'java:S3776', // Allow methods with more than 15 lines
      'java:S4032', // Allow packages only containing `package-info.java`
    )
  }
}

strictNullCheck {
  addEclipse()
  packageInfo {
    useEclipse()
    javadoc = '@author Jose Luis Leon'
  }
}

dependencyLocking {
  lockAllConfigurations()
}

// Workaround for: https://github.com/checkstyle/checkstyle/issues/14211
configurations.checkstyle {
  resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
    select("com.google.guava:guava:0")
  }
}

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor(libs.lombok)
  compileOnly(libs.flyway.core)
  compileOnly(libs.lombok)
  sonarlintCorePlugins(libs.sonarlint.java)

  implementation(libs.maybe)
  implementation(libs.picocli)
  implementation(libs.reactor.core)
  implementation(libs.reactor.extra)
  implementation(libs.slf4j.api)
}

testing {
  suites {
    test {
      useJUnitJupiter(libs.versions.junit.get())

      dependencies {
        annotationProcessor(libs.lombok)
        compileOnly(libs.lombok)

        implementation(libs.assertj.core)
        implementation(libs.flyway.core)
        implementation(libs.h2)
        implementation(libs.reactor.test)
        implementation(libs.systemStubs.core)
        implementation(libs.systemStubs.jupiter)
      }

      targets {
        all {
          testTask.configure {
            testLogging.showStandardStreams(false)

            systemProperty("java.security.manager", "allow")
          }
        }
      }
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)

      pom {
        name = 'atomic-flyway'
        packaging = 'jar'
        description = """
          A wrapper around Flyway to make your migration atomic. That is to say, \
          it provides a revert mechanism that is set in place by design every \
          time you write a migration.
          """
        url = 'https://joselion.github.io/atomic-flyway/'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/atomic-flyway.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/atomic-flyway.git'
          url = 'https://github.com/joselion/atomic-flyway'
        }

        licenses {
          license {
            name = 'Apache License 2.0'
            url = 'https://github.com/JoseLion/atomic-flyway/blob/main/LICENSE'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")

  useInMemoryPgpKeys(signingKey, signingPassword)
  sign(publishing.publications.mavenJava)
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
      snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
  }
}
