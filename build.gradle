buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id 'checkstyle'
  id 'java-library'
  id 'maven-publish'
  id 'signing'

  id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
  id 'io.github.joselion.pretty-jupiter' version '2.2.1'
  id 'io.github.joselion.strict-null-check' version '2.2.0'
  id 'se.solrike.sonarlint' version '1.0.0-beta.15'
}

group = 'io.github.joselion'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(20)
    vendor = JvmVendorSpec.ORACLE
  }

  withJavadocJar()
  withSourcesJar()
}

javadoc {
  options.addBooleanOption('html5', true)

  title = 'Atomic Flyway'
  options {
    addStringOption('Xwerror', '-quiet')
    tags('apiNote')
  }
}

jar {
  from(sourceSets.main.allSource)
  manifest {
    attributes(
      'Implementation-Title': project.name,
      'Implementation-Version': project.version
    )
  }
}

dependencyLocking {
  lockAllConfigurations()
}

checkstyle {
  setToolVersion('10.12.0')
}

sonarlint {
  excludeRules = [
    'java:S107', // Allow constructors with more than 7 parameters
    'java:S3776', // Allow methods with more than 15 lines
    'java:S4032', // Allow packages only containing `package-info.java`
  ]
  includeRules = [
    'java:S4266', // "Stream.collect()" calls should not be redundant
  ]
}

repositories {
  mavenCentral()
}

def flywayVersion = '9.+'
def log4jVersion = '2.20.0'
def reactorVersion = '3.5.6'

dependencies {
  compileOnly("org.flywaydb:flyway-core:$flywayVersion")

  implementation('info.picocli:picocli:4.7.4')
  implementation('io.github.joselion:maybe:3.2.0')
  implementation("io.projectreactor:reactor-core:$reactorVersion")
  implementation("org.apache.logging.log4j:log4j-api:$log4jVersion")
  implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")

  testImplementation('com.h2database:h2:2.1.214')
  testImplementation("io.projectreactor:reactor-test:$reactorVersion")
  testImplementation('org.assertj:assertj-core:3.24.2')
  testImplementation("org.flywaydb:flyway-core:$flywayVersion")
  testImplementation('uk.org.webcompere:system-stubs-core:2.0.2')
  testImplementation('uk.org.webcompere:system-stubs-jupiter:2.0.2')
}

testing {
  suites {
    test {
      useJUnitJupiter('5.9.3')

      targets {
        all {
          testTask.configure {
            testLogging.showStandardStreams(false)

            systemProperty("java.security.manager", "allow")
          }
        }
      }
    }
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)

      pom {
        name = 'atomic-flyway'
        packaging = 'jar'
        description = """
          A wrapper around Flyway to make your migration atomic. That is to say, \
          it provides a revert mechanism that is set in place by design every \
          time you write a migration.
          """
        url = 'https://github.com/JoseLion/atomic-flyway'

        scm {
          connection = 'scm:git:https://github.com/JoseLion/atomic-flyway.git'
          developerConnection = 'scm:git:ssh://github.com/JoseLion/atomic-flyway.git'
          url = 'https://github.com/joselion/atomic-flyway'
        }

        licenses {
          license {
            name = 'Apache License 2.0'
            url = 'https://github.com/JoseLion/atomic-flyway/blob/main/LICENSE'
          }
        }

        developers {
          developer {
            id = 'JoseLion'
            name = "Jose Luis Leon"
            email = 'joseluis5000l@gmail.com'
          }
        }
      }
    }
  }
}

signing {
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")

  useInMemoryPgpKeys(signingKey, signingPassword)
  sign(publishing.publications.mavenJava)
}

nexusPublishing {
  repositories {
    sonatype {
      nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
      snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
  }
}
